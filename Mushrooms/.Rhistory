colnames(splash_mtn) <- c("date","datetime","actual","posted")
splash_mtn %>%
pivot_longer(cols = c("actual", "posted")) %>%
mutate(datetime = lubridate::as_date(datetime)) %>%
filter(!is.na(value)) %>%
filter(value > 0) %>%
ggplot(aes(datetime, value, color = as.factor(name))) +
geom_line() +
facet_wrap(~name, nrow = 2, ncol = 1) +
labs(color = "", title = "Splash Mountain - Wait times")+
scale_color_brewer(palette = "Set1")+
ggthemes::theme_fivethirtyeight()
splash_mtn_tdy <- splash_mtn %>%
pivot_longer(cols = c("actual", "posted"))
# Clean out duplicates
splash_mtn_tdy %>%
filter(name == "actual") %>%
drop_na() %>%
duplicates()
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
filter(flag == 1) %>%
drop_na() %>%
group_by(datetime) %>%
summarize(value = mean(value)) %>%
mutate_all(~replace(., is.na(.), 0))
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
filter(flag == 1) %>%
mutate_all(~replace(., is.na(.), 0))
library(tidyverse)
library(readxl)
library(ggthemes)
library(lubridate)
library(feasts)
library(tsibbledata)
library(tsibble)
splash_mtn <- readr::read_csv("../raw-data/splash_mountain.csv")
colnames(splash_mtn) <- c("date","datetime","actual","posted")
splash_mtn %>%
pivot_longer(cols = c("actual", "posted")) %>%
mutate(datetime = lubridate::as_date(datetime)) %>%
filter(!is.na(value)) %>%
filter(value > 0) %>%
ggplot(aes(datetime, value, color = as.factor(name))) +
geom_line() +
facet_wrap(~name, nrow = 2, ncol = 1) +
labs(color = "", title = "Splash Mountain - Wait times")+
scale_color_brewer(palette = "Set1")+
ggthemes::theme_fivethirtyeight()
splash_mtn_tdy <- splash_mtn %>%
pivot_longer(cols = c("actual", "posted"))
# Clean out duplicates
splash_mtn_tdy %>%
filter(name == "actual") %>%
drop_na() %>%
duplicates()
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
filter(flag == 1) %>%
mutate_all(~replace(., is.na(.), 0)) %>%
drop_na() %>%
group_by(datetime) %>%
summarize(value = mean(value))
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
filter(flag == 1) %>%
drop_na() %>%
group_by(datetime) %>%
summarize(value = mean(value))
View(splash_mtn_tdy_act)
splash_mtn_tdy_act %>%
filter(is.na(value))
splash_mtn_tdy_act %>%
as_tsibble() %>%
tsibble::fill_gaps()
?replace_na
splash_mtn_tdy <- splash_mtn %>%
pivot_longer(cols = c("actual", "posted"))
# Clean out duplicates
splash_mtn_tdy %>%
filter(name == "actual") %>%
drop_na() %>%
duplicates()
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
filter(flag == 1) %>%
drop_na() %>%
group_by(datetime) %>%
summarize(value = mean(value))
dcmp_spl_mtn <- splash_mtn_tdy_act %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
mutate(month = lubridate::month(datetime)) %>%
model(STL(value ~ season("month", window = "periodic")))
dcmp_spl_mtn <- splash_mtn_tdy_act %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(value = ifelse(is.na(value),0,value))
splash_mtn_tdy <- splash_mtn %>%
pivot_longer(cols = c("actual", "posted"))
# Clean out duplicates
splash_mtn_tdy %>%
filter(name == "actual") %>%
drop_na() %>%
duplicates()
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
filter(flag == 1) %>%
drop_na() %>%
group_by(datetime) %>%
summarize(value = mean(value))
dcmp_spl_mtn <- splash_mtn_tdy_act %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(value = ifelse(is.na(value),0,value)) %>%
mutate(month = lubridate::month(datetime)) %>%
model(STL(value ~ season("month", window = "periodic")))
splash_mtn_tdy_act %>%
as_tsibble() %>%
tsibble::fill_gaps()
library(tidyverse)
library(readxl)
library(ggthemes)
library(lubridate)
library(feasts)
library(tsibbledata)
library(tsibble)
splash_mtn <- readr::read_csv("../raw-data/splash_mountain.csv")
colnames(splash_mtn) <- c("date","datetime","actual","posted")
splash_mtn %>%
pivot_longer(cols = c("actual", "posted")) %>%
mutate(datetime = lubridate::as_date(datetime)) %>%
filter(!is.na(value)) %>%
filter(value > 0) %>%
ggplot(aes(datetime, value, color = as.factor(name))) +
geom_line() +
facet_wrap(~name, nrow = 2, ncol = 1) +
labs(color = "", title = "Splash Mountain - Wait times")+
scale_color_brewer(palette = "Set1")+
ggthemes::theme_fivethirtyeight()
splash_mtn_tdy <- splash_mtn %>%
pivot_longer(cols = c("actual", "posted"))
# Clean out duplicates
splash_mtn_tdy %>%
filter(name == "actual") %>%
drop_na() %>%
duplicates()
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
filter(flag == 1) %>%
drop_na() %>%
group_by(datetime) %>%
summarize(value = mean(value))
View(splash_mtn_tdy_act)
splash_mtn_tdy_act %>%
as_tsibble()
splash_mtn_tdy_act %>%
as_tsibble() %>%
tsibble::fill_gaps()
library(tidyverse)
library(readxl)
library(ggthemes)
library(lubridate)
library(feasts)
library(tsibbledata)
library(tsibble)
splash_mtn <- readr::read_csv("../raw-data/splash_mountain.csv")
colnames(splash_mtn) <- c("date","datetime","actual","posted")
splash_mtn %>%
pivot_longer(cols = c("actual", "posted")) %>%
mutate(datetime = lubridate::as_date(datetime)) %>%
filter(!is.na(value)) %>%
filter(value > 0) %>%
ggplot(aes(datetime, value, color = as.factor(name))) +
geom_line() +
facet_wrap(~name, nrow = 2, ncol = 1) +
labs(color = "", title = "Splash Mountain - Wait times")+
scale_color_brewer(palette = "Set1")+
ggthemes::theme_fivethirtyeight()
splash_mtn_tdy <- splash_mtn %>%
pivot_longer(cols = c("actual", "posted"))
# Clean out duplicates
splash_mtn_tdy %>%
filter(name == "actual") %>%
drop_na() %>%
duplicates()
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = lubridate::ydm_hm(datetime)) %>%
filter(flag == 1) %>%
drop_na() %>%
group_by(datetime) %>%
summarize(value = mean(value))
View(splash_mtn)
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = lubridate::ymd_hm(datetime)) %>%
filter(flag == 1) %>%
drop_na() %>%
group_by(datetime) %>%
summarize(value = mean(value))
splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = lubridate::ymd_hm(datetime))
?lubridate::ymd_hm
splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = lubridate::ymd_hms(datetime))
View(splash_mtn)
nchar("2015-01-03 09:09:12")
splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = lubridate::ymd_hms(substring(datetime,1,15)))
splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = substring(datetime,1,15))
splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = substring(datetime,1,16))
splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = lubridate::ymd_hms(substring(datetime,1,16)))
splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = lubridate::ymd_hm(substring(datetime,1,16)))
splash_mtn_tdy <- splash_mtn %>%
pivot_longer(cols = c("actual", "posted"))
# Clean out duplicates
splash_mtn_tdy %>%
filter(name == "actual") %>%
drop_na() %>%
duplicates()
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = lubridate::ymd_hm(substring(datetime,1,16))) %>%
filter(flag == 1) %>%
drop_na() %>%
group_by(datetime) %>%
summarize(value = mean(value))
dcmp_spl_mtn <- splash_mtn_tdy_act %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(value = ifelse(is.na(value),0,value)) %>%
mutate(month = lubridate::month(datetime)) %>%
model(STL(value ~ season("month", window = "periodic")))
components(dcmp_spl_mtn) %>% autoplot()
dcmp_spl_mtn <- splash_mtn_tdy_act %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(value = ifelse(is.na(value),0,value)) %>%
mutate(month = lubridate::month(datetime)) %>%
model(STL(value ~ season("day", window = "periodic")))
components(dcmp_spl_mtn) %>% autoplot()
splash_mtn_tdy <- splash_mtn %>%
pivot_longer(cols = c("actual", "posted"))
# Clean out duplicates
splash_mtn_tdy %>%
filter(name == "actual") %>%
drop_na() %>%
duplicates()
# Clean out any duplicate or incorrect data.
splash_mtn_tdy_act <- splash_mtn_tdy %>%
filter(name == "actual") %>%
mutate(flag = ifelse(lubridate::mdy(date) == lubridate::date(datetime),1,0)) %>%
mutate(datetime = lubridate::ymd_hm(substring(datetime,1,16))) %>%
filter(flag == 1) %>%
drop_na() %>%
group_by(datetime) %>%
summarize(value = mean(value))
dcmp_spl_mtn <- splash_mtn_tdy_act %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(value = ifelse(is.na(value),0,value)) %>%
mutate(month = lubridate::month(datetime)) %>%
model(STL(value ~ season("month", window = "periodic")))
components(dcmp_spl_mtn) %>% autoplot()
View(splash_mtn_tdy)
365*5
dcmp_spl_mtn <- splash_mtn_tdy_act[1:1825,] %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(value = ifelse(is.na(value),0,value)) %>%
mutate(month = lubridate::month(datetime)) %>%
model(STL(value ~ season("month", window = "periodic")))
components(dcmp_spl_mtn) %>% autoplot()
splash_mtn_tdy_act[1:1825,] %>%
as_tsibble() %>%
tsibble::fill_gaps() %>%
mutate(value = ifelse(is.na(value),0,value)) %>%
mutate(month = lubridate::month(datetime)) %>%
gg_season(value)
8967.69+11266.03
8967.69-7000
(80+86+79)/3
setwd("~/Documents/GitHub/SmallDataScienceProjects/Mushrooms")
mushrooms <- readr::read_csv("mushrooms.csv")
library(tidyverse)
mushrooms <- readr::read_csv("mushrooms.csv")
library(tidyverse)
mushrooms <- readr::read_csv("mushrooms.csv")
View(mushrooms)
```{r Setup, message = F}
library(tidyverse)
mushrooms <- readr::read_csv("mushrooms.csv")
View(mushrooms)
library(tidyverse)
mushrooms <- readr::read_csv("mushrooms.csv")
library(tidyverse)
mushrooms <- readr::read_csv("mushrooms.csv")
# Some parsing failures, need to revisit.
?FactoMineR::CA()
FactoMineR::CA(mushrooms, ncp = 5)
# Make Contingency Table
mushrooms %>%
group_by(class)
# Make Contingency Table
mushrooms %>%
group_by(class) %>%
FactoMineR::CA(mushrooms, ncp = 5)
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = c(`cap-shape`:`habitat`))
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = c(2:23))
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = c(2:23))
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = c(1:23))
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = c(2:23))
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = c(colnames(mushrooms)[2:23]))
colnames(mushrooms)[2:23])
colnames(mushrooms)[2:23]
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23])
?readr::read_csv
mushrooms <- readr::read_csv("mushrooms.csv", col_types = "character")
mushrooms <- readr::read_csv("mushrooms.csv", col_types = "c")
View(mushrooms)
mushrooms <- readr::read_csv("mushrooms.csv",
col_types = rep("c",23))
mushrooms <- readr::read_csv("mushrooms.csv",
col_types = rep("c",24))
mushrooms <- readr::read_csv("mushrooms.csv",
col_types = rep("c",23))
mushrooms <- readr::read_csv("mushrooms.csv")
mushrooms <- readr::read_csv("mushrooms.csv",
col_types = "c")
rep("c", 23)
list(rep("c", 23))
unlist(rep("c", 23))
col_types = as.list(rep("c", 23))
mushrooms <- readr::read_csv("mushrooms.csv",
col_types = as.list(rep("c", 23)))
mushrooms <- readr::read_csv("mushrooms.csv",
col_types = as.list(rep("c", 23)))
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23])
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count()
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count() %>%
FactoMineR::CA()
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count()
?FactoMineR::CA
data(FactoMineR::children)
data(children)
data(factoextra::housetasks)
View(factoextra::housetasks)
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count() %>%
ungroup()
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count() %>%
ungroup() %>%
group_by(class) %>%
ggplot(aes(name,value, color = n)) %>%
geom_tile()
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count() %>%
ungroup() %>%
group_by(class) %>%
ggplot(aes(name,value, color = n)) +
geom_tile() +
facet_wrap(~class)
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count() %>%
ungroup() %>%
group_by(class) %>%
ggplot(aes(name,value, cfill = n)) +
geom_tile() +
facet_wrap(~class)
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count() %>%
ungroup() %>%
group_by(class) %>%
ggplot(aes(name,value, fill = n)) +
geom_tile() +
facet_wrap(~class)
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count() %>%
ungroup() %>%
group_by(class) %>%
ggplot(aes(name,value, fill = n)) +
geom_tile() +
coord_flip() +
facet_wrap(~class)
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count() %>%
ungroup() %>%
group_by(class) %>%
ggplot(aes(name,value, fill = n)) +
geom_tile() +
coord_flip() +
facet_wrap(~name)
# Make Contingency Table
mushrooms %>%
pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
group_by(class, name, value) %>%
count() %>%
ungroup() %>%
group_by(class) %>%
ggplot(aes(name,value, fill = n)) +
geom_tile() +
coord_flip()+
facet_wrap(~class)
mushrooms %>%
group_by(class) %>%
count()
# Might do something with this later.
# mushrooms %>%
#   pivot_longer(cols = colnames(mushrooms)[2:23]) %>%
#   group_by(class, name, value) %>%
#   count() %>%
#   ungroup() %>%
#   group_by(class) %>%
#   ggplot(aes(name,value, fill = n)) +
#   geom_tile() +
#   coord_flip()+
#   facet_wrap(~class)
# Classes Look balanced
mushrooms %>%
group_by(class) %>%
count()
