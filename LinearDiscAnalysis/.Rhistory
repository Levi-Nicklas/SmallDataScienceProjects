area <- trapezoid(ftn1, 0, 1, n)
if(abs(area - 1) <= eps_vec[i]){
results[i] <- n
found = TRUE
}
# Try more partitions.
n <- n + 1
}
}
rm(x)
for(i in 1:length(eps_vec)){
while(!found){
area <- trapezoid(ftn1, 0, 1, n)
if(abs(area - 1) <= eps_vec[i]){
results[i] <- n
found = TRUE
}
# Try more partitions.
n <- n + 1
}
}
# Define Function to Integrate
ftn1 <- function(x){
return(5 * x ^ 4)
}
# Construct vector of epsilons.
eps_vec <- 2:16
eps_vec <- 2 ^ (- eps_vec)
# Construct vector to store # of partitions.
partitions <- 1:length(eps_vec)
# things to loop.
n = 1
k = 1
found = FALSE
# Store results
results <- rep(0, length(eps_vec))
for(i in 1:length(eps_vec)){
while(!found){
area <- trapezoid(ftn1, 0, 1, n)
if(abs(area - 1) <= eps_vec[i]){
results[i] <- n
found = TRUE
}
# Try more partitions.
n <- n + 1
}
}
for(i in 1:length(eps_vec)){
# things to loop.
n = 1
k = 1
found = FALSE
while(!found){
area <- trapezoid(ftn1, 0, 1, n)
if(abs(area - 1) <= eps_vec[i]){
results[i] <- n
found = TRUE
}
# Try more partitions.
n <- n + 1
}
}
# Store results
results <- matrix(
rep(0, 2*length(eps_vec)),
ncol = 2)
# Store results
results <- rep(0, length(eps_vec))
matrix(c(1:15,results))
matrix(c(1:15,results), ncol = 2)
# Define Function to Integrate
ftn1 <- function(x){
return(5 * x ^ 4)
}
# Construct vector of epsilons.
eps_vec <- 2:16
eps_vec <- 2 ^ (- eps_vec)
# Construct vector to store # of partitions.
partitions <- 1:length(eps_vec)
# Store results
results <- rep(0, length(eps_vec))
for(i in 1:length(eps_vec)){
# things to loop.
n = 1
k = 1
found = FALSE
while(!found){
area <- trapezoid(ftn1, 0, 1, n)
if(abs(area - 1) <= eps_vec[i]){
results[i] <- n
found = TRUE
}
# Try more partitions.
n <- n + 1
}
}
matrix(c(1:15,results), ncol = 2)
plot(matrix(c(1:15,results), ncol = 2))
xlab("k")
?plot
plot(matrix(c(1:15,results), ncol = 2),
xlab = "k",
ylab = "Trapezoid"
)
plot(matrix(c(1:15,results), ncol = 2),
xlab = "k",
ylab = "Partitions Needed",
title = "Trapezoid Method"
)
plot(matrix(c(1:15,results), ncol = 2),
xlab = "k",
ylab = "Partitions Needed",
main = "Trapezoid Method"
)
# Define Function to Integrate
ftn1 <- function(x){
return(5 * x ^ 4)
}
# Construct vector of epsilons.
eps_vec <- 2:16
eps_vec <- 2 ^ (- eps_vec)
# Construct vector to store # of partitions.
partitions <- 1:length(eps_vec)
# Store results
results <- rep(0, length(eps_vec))
for(i in 1:length(eps_vec)){
# things to loop.
n = 1
k = 1
found = FALSE
while(!found){
area <- simpson_n(ftn1, 0, 1, n)
if(abs(area - 1) <= eps_vec[i]){
results[i] <- n
found = TRUE
}
# Try more partitions.
n <- n + 1
}
}
matrix(c(1:15,results), ncol = 2)
plot(matrix(c(1:15,results), ncol = 2),
xlab = "k",
ylab = "Partitions Needed",
main = "Trapezoid Method"
)
# Define Function to Integrate
ftn1 <- function(x){
return(5 * x ^ 4)
}
# Construct vector of epsilons.
eps_vec <- 2:16
eps_vec <- 2 ^ (- eps_vec)
# Construct vector to store # of partitions.
partitions <- 1:length(eps_vec)
# Store results
results <- rep(0, length(eps_vec))
for(i in 1:length(eps_vec)){
# things to loop.
n = 1
k = 1
found = FALSE
while(!found){
area <- simpson_n(ftn1, 0, 1, n)
if(abs(area - 1) <= eps_vec[i]){
results[i] <- n
found = TRUE
}
# Try more partitions.
n <- n + 1
}
}
matrix(c(1:15,results), ncol = 2)
plot(matrix(c(1:15,results), ncol = 2),
xlab = "k",
ylab = "Partitions Needed",
main = "Simpson's Method"
)
myint <- function(f, a, b, n) {
if (n > 0) {
m <- (a + b)/2
return( myint(f, a, m, n-1) + myint(f, m, b, n-1) )
} else {
return( (f(a) + f(b))*(b - a)/2 ) # (*)
}
}
ftn2 <- function(x){
1/(2*pi) * exp (-x ^ 2 / 2)
}
# Function is symmetric
2 * simpson_n(ftn2, 0, 1.96, n = 500)
simpson_n(ftn2, -1.96, 1.96, n = 1000)
# Function is symmetric
2 * simpson_n(ftn2, 0, 1.96, n = 500)
simpson_n(ftn2, -1.96, 1.96, n = 1000)
pnorm(1.96)
pnorm(1.96, lower.tail = FALSE)
2*pnorm(1.96, lower.tail = FALSE)
?pnrom
?pnorm
pnorm(0.3789968, lower.tail = FALSE)
pnorm(0.3789968, lower.tail = TRUE)
pnorm(1.96, lower.tail = TRUE)
pnorm(1.96)
pnorm(1.96) - pnorm(-1.96)
# Function is symmetric
2*simpson_n(ftn2, 0, 1.96, n = 500)
ftn2 <- function(x){
1/sqrt(2*pi) * exp (-x ^ 2 / 2)
}
# Function is symmetric
2*simpson_n(ftn2, 0, 1.96, n = 500)
ftn3 <- function(z){
if(z < 0){
0.5 - simpson_n(ftn2, z, 0, 100)
}else{
0.5 + simpson_n(ftn2, 0, z, 100)
}
}
f(0.8)
ftn3(0.8)
pnorm(0.8)
library(spuRs)
library(tidyverse)
ftn4 <- function(x){
point = bisection(function(x_in) f(x_in) - x, x.l = 0, x.r = 2.4)
return(point)
}
points <- unlist(map(c(0.5, 0.95, 0.975, 0.99), ftn4))
ftn4 <- function(x){
point = bisection(function(x_in) ftn3(x_in) - x, x.l = 0, x.r = 2.4)
return(point)
}
points <- unlist(map(c(0.5, 0.95, 0.975, 0.99), ftn4))
unlist(map(c(0.5, 0.95, 0.975, 0.99), qnorm))
library(lpSolve)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
full_dataset <- read_csv("Problem1_Dataset_R.csv")
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(DATE, log(value), color = name))+
geom_line(size = 0.5) +
geom_vline(xintercept = as.Date("2006-06-01"), size = 0.75, lty = 2)+
scale_color_brewer(palette = "Dark2") +
facet_wrap(~name, scales = "free") +
labs(x = "Year", y = "ln(value)", color = "Variable",
caption = "* Dashed line at 06/01/2006")+
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(name, log(value), color = name))+
geom_boxplot()+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(log(value), color = name))+
geom_histogram()+
facet_wrap(~name)+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(log(value), color = name))+
geom_histogram(bins = 100)+
facet_wrap(~name)+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(log(value), color = name))+
geom_histogram(bins = 100)+
facet_wrap(~name,scales = "Free")+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(log(value), color = name))+
geom_histogram(bins = 100)+
facet_wrap(~name, scales = "free")+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(log(value), fill = name))+
geom_histogram(bins = 100)+
facet_wrap(~name, scales = "free")+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(log(value), fill = name))+
geom_histogram(bins = 100)+
facet_wrap(~name, scales = "free")+
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
facet_wrap(~name, scales = "free")+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(names ,aes(log(value), color = name))+
geom_boxplot()+
geom_jitter(alpha = 0.1)+
facet_wrap(~name, scales = "free")+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(names,log(value), color = name))+
geom_boxplot()+
geom_jitter(alpha = 0.1)+
facet_wrap(~name, scales = "free")+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(names, log(value), color = name))+
geom_boxplot()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(names, value, color = name))+
geom_boxplot()+
geom_jitter(alpha = 0.1)+
facet_wrap(~name, scales = "free")+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na()
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(name, log(value), color = name))+
geom_boxplot()+
geom_jitter(alpha = 0.1)+
facet_wrap(~name, scales = "free")+
scale_color_brewer(palette = "Dark2") +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
full_dataset <- read_csv("P1_DataSet_FRED.csv")
summary(full_dataset[,2:5])
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLF, FLNA)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(name, log(value), color = name))+
geom_boxplot()+
geom_jitter(alpha = 0.1)+
facet_wrap(~name, scales = "free")+
scale_color_brewer(palette = "Dark2") +
theme_minimal() +
labs(x = "Variable", y = "log() of value",
title = "Data Distribution by Variable")
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLFN, FLNAN)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(name, log(value), color = name))+
geom_boxplot()+
geom_jitter(alpha = 0.1)+
facet_wrap(~name, scales = "free")+
scale_color_brewer(palette = "Dark2") +
theme_minimal() +
labs(x = "Variable", y = "log() of value",
title = "Data Distribution by Variable")
full_dataset %>%
pivot_longer(c(LNU02300000, FLBPPRIV, FLLFN, FLNAN)) %>%
group_by(name) %>%
drop_na() %>%
ggplot(aes(DATE, log(value), color = name))+
geom_line(size = 0.5) +
geom_vline(xintercept = as.Date("2006-06-01"), size = 0.75, lty = 2)+
scale_color_brewer(palette = "Dark2") +
facet_wrap(~name, scales = "free") +
labs(x = "Year", y = "ln(value)", color = "Variable",
caption = "* Dashed line at 06/01/2006")+
theme_minimal()
sessionInfo()
updateR()
installr::updateR()
install.packages("installr")
14*5
library(tidyverse)
library(RedditExtractoR)
library(lubridate)
keywords <- c("blood pressure", "hypertension", "heart",
"cardio", "cardiovascular", "EKG", "stress",
"sodium", "cholesterol", "sleep", "money",
"cost", "price", "available")
subreddits <- c("keto", "paleo", "vegan", "whole30", "carnivore")
comment_threshold <- 5
page_threshold <- 5
sorting_crit <- "comments"
delay_time <- 2
BuildRedditRData <- function(search_word, which_subreddit){
# This function needs some error handling.
result <- RedditExtractoR::get_reddit(search_terms = search_word,
subreddit = which_subreddit,
cn_threshold = comment_threshold,
sort_by = sorting_crit,
wait_time = delay_time)
print(result)
data_name <- paste0(gsub(" ", "", search_word, fixed = TRUE),
"-",
which_subreddit #,
#"_",
#lubridate::today(tz = "UTC")
)
saveRDS(object = result,
file = paste0("/Users/levinicklas/Documents/ds_research_SP_2020/Levi_Text_Mining/Raw_Data/",data_name,".RDS"))
}
for(i in 1:length(subreddits)){
for(j in 1:length(keywords)){
BuildRedditRData(search_word = keywords[j],
which_subreddit = subreddits[i+3])
}
}
install.packages("beepr")
library(beepr)
beepr::beep(sound = 1)
beepr::beep(sound = 2)
beepr::beep(sound = 3)
beepr::beep(sound = 4)
beepr::beep(sound = 5)
for(i in 1:length(subreddits)){
for(j in 1:length(keywords)){
BuildRedditRData(search_word = keywords[j],
which_subreddit = subreddits[i+3])
beepr::beep(sound = 1)
}
}
beepr::beep(sound = 4)
beepr::beep_on_error(sound = 1)
beepr::beep(sound = 6)
beepr::beep(sound = 7)
beepr::beep_on_error(sound = 1)
for(i in 1:length(subreddits)){
for(j in 1:length(keywords)){
BuildRedditRData(search_word = keywords[j],
which_subreddit = subreddits[i+3])
beepr::beep(sound = 1)
}
}
beepr::beep(sound = 4)
BuildRedditRData(search_word = keywords[1], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[2], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[3], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[4], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[5], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[6], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[7], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[8], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[9], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[10], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[11], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[12], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[13], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[14], which_subreddit = subreddits[4])
BuildRedditRData(search_word = keywords[1], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[2], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[3], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[4], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[5], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[6], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[6], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[7], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[8], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[9], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[10], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[11], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[12], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[13], which_subreddit = subreddits[5])
BuildRedditRData(search_word = keywords[14], which_subreddit = subreddits[5])
setwd("~/Documents/SmallDataScienceProjects/LinearDiscAnalysis")
install.packages("mlbench")
library(mlbench)
head(dslabs::olive)
dslabs::olive %>%
head()
head(dslabs::olive)
library(tidyverse)
library(dslabs)
library(tidyverse)
