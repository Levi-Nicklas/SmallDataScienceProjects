View(results)
dim(results)
results[1,2]
for i in 1:1000{
for j in seq(0,1,0.01){
val<-det(numDeriv::hessian(kelly,c(j,i)))
results[i,j] <- val
}
}
kelly <- function(params){
# C is a free var.
# B is a free var.
t <- params[1]
f <- params[2]
((C/B)^(1/t)-1)/f
}
C <- 10000
B <- 1000
# Compute Hessian at a point p.
numDeriv::hessian(kelly,c(10,0.4))
det(numDeriv::hessian(kelly,c(10,0.4)))
for i in 1:1000{
for j in seq(0,1,0.01){
val<-det(numDeriv::hessian(kelly,c(j,i)))
results[i,j] <- val
}
}
for(i in 1:1000){
for(j in seq(0,1,0.01)){
val<-det(numDeriv::hessian(kelly,c(j,i)))
results[i,j] <- val
}
}
for(i in 1:1000){
for(j in seq(0,1,0.01)){
val<-det(numDeriv::hessian(kelly,c(j,i)))
results[i,j] <- val
}
}
image(raster(results))
image(results)
View(results)
dim(results)
results<-matrix(rep(0,101000), nrow = 1000)
results[1,2] <- 2
View(results)
results<-matrix(rep(0,101000), nrow = 1000)
#compute for
for(i in 1:1000){
for(j in seq(0,1,0.01)){
val<-det(numDeriv::hessian(kelly,c(j,i)))
results[j,i] <- val
}
}
#compute for
for(i in 1:1000){
for(j in seq(0,1,0.01)){
val<-det(numDeriv::hessian(kelly,c(j,i)))
results[i,j] <- val
}
}
View(results)
image(results)
dim(results)
#compute for
for(i in 1:1000){
for(j in seq(0,1,0.01)){
val<-det(numDeriv::hessian(kelly,c(j,i)))
results[i,j] <- val
print(paste0(i,"-",j))
}
}
View(results)
library(tidyverse)
library(reshape2)
results <- as.data.frame(results)
?heatmap
heatmap(results)
heatmap(as.matrix(results))
View(results)
kelly(c(2,0.01))
kelly(c(3,0.03))
results<-matrix(rep(0,101000), nrow = 1000)
101*1000
results<-rep(0, 101000)
#compute for
for(i in 1:1000){
for(j in seq(0,1,0.01)){
results[i*j] <- c(i,j)
}
}
results<-matrix(rep(0,101000), nrow = 1000)
#compute for
for(i in 1:1000){
for(j in seq(0,1,0.01)){
val<-det(numDeriv::hessian(kelly,c(j,i)))
results[i,j] <- val
print(paste0(i,"-",j))
}
}
t1 <- seq(0,1,by=0.01)
t2 <- seq(0,101)
t2/100 == t1
t2 <- seq(0,101)
t2 <- seq(0,100)
t2/100 == t1
t1
t2
t2/100
t1
t2/100 == t1
t2[58]/100 == t1[58]
t2[58]/100
t1[58]
t2[58]
t2[58]/100
#compute for
for(i in 1:1000){
for(j in seq(0,101)){
val<-det(numDeriv::hessian(kelly,c(j,i)))
results[i,j] <- val
print(paste0(i,"-",j))
}
}
View(results)
## VIZ
results_df <- as.data.frame(results)
results_df$i <- (1:1000)
View(results_df)
library(reshape2)
?melt
melted_data <- melt(results_df)
melted_data <- melt(results_df, id = i)
long_data <- results_df %>%
pivot_longer(cols = c(i))
View(long_data)
rm(melted_data)
?pivot_longer
long_data <- results_df %>%
pivot_longer(cols = c(-i))
View(long_data)
View(long_data)
rep(1:101, 2)
View(results)
range(results_df$i)
long_data$j <- rep(1:101, 1000)
long_data %>%
ggplot(aes(Var1,Var2, fill=value)) + geom_raster()
long_data %>%
ggplot(aes(i,j, fill=value)) + geom_raster()
range(long_data$value)
long_data %>%
ggplot(aes(i,j, fill=value)) + geom_tile()
long_data %>%
ggplot(aes(i,j, fill=density)) + geom_tile()
long_data %>%
ggplot(aes(i,j, fill = value, color = value)) + geom_tile()
long_data %>%
ggplot(aes(i,j, fill = value)) + geom_tile()
image(results)
View(results)
image(results > 0.1)
image(results > 0.5)
View(results)
long_data %>%
ggplot(aes(i,j, fill = value)) + geom_raster()
range(long_data$value)
summary(long_data$value)
image(results > 10)
results > 10
long_data %>%
filter(value > 10)
long_data %>%
filter(value > 5)
long_data %>%
filter(value > 3)
long_data %>%
filter(value > 2)
long_data %>%
filter(value > 1)
long_data %>%
filter(value > 1) %>%
ggplot(aes(i,j, fill = value)) + geom_raster()
long_data %>%
filter(value > 1) %>%
count()
?geom_raster
ggplot() + geom_raster(aes(i,j, fill = value))
ggplot() + geom_raster(aes(i,j, color = value))
?geom_raster
long_data %>%
filter(value > 1) %>%
ggplot(aes(i,j, fill = value)) + geom_tile()
long_data %>%
filter(value < 1) %>%
ggplot(aes(i,j, fill = value)) +
geom_tile()
long_data %>%
filter(value > 0.05)
long_data %>%
ggplot(aes(value))+
geom_histogram()
long_data %>%
ggplot(aes(value))+
geom_histogram(binwidth = 0.0001)
long_data %>%
ggplot(aes(value))+
geom_histogram(binwidth = 0.001)
long_data %>%
ggplot(aes(value))+
geom_histogram(binwidth = 0.01)
long_data %>%
ggplot(aes(value))+
geom_histogram(binwidth = 0.1)
long_data %>%
ggplot(aes(value))+
geom_boxplot()
long_data %>%
ggplot(aes(j, value))+
geom_boxplot()
long_data %>%
ggplot(aes(1, value))+
geom_boxplot()
long_data %>%
filter(value > 0.05) %>%
ggplot(aes(i,j, fill = value)) +
geom_tile()
long_data %>%
filter(value > 0.001) %>%
ggplot(aes(i,j, fill = value)) +
geom_tile()
long_data %>%
filter(value > 0.011) %>%
ggplot(aes(i,j, fill = value)) +
geom_tile()
long_data %>%
filter(value > 0.01) %>%
ggplot(aes(i,j, fill = value)) +
geom_tile()
long_data %>%
filter(value) %>%
ggplot(aes(i,j, fill = value)) +
geom_tile()
long_data %>%
filter(value) %>%
ggplot(aes(i,j, fill = value)) +
geom_tile()
long_data %>%
ggplot(aes(i,j, fill = value)) +
geom_tile()
?scale_fill_continuous
long_data %>%
ggplot(aes(i,j, fill = value)) +
geom_tile() +
scale_fill_continuous(limits = c(0,1))
long_data %>%
ggplot(aes(i,j, fill = value)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral",
limits = c(min(long_data$value), median(long_data$value)*2))
long_data %>%
ggplot(aes(i,j, fill = value)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral",
limits = c(min(long_data$value), median(long_data$value)*5))
long_data %>%
ggplot(aes(i,j, fill = value)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral",
limits = c(min(long_data$value), median(long_data$value)*10))
long_data %>%
ggplot(aes(i,j, fill = value)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral",
limits = c(min(long_data$value), median(long_data$value)*100))
summary(long_data$value)
View(long_data)
View(results)
limits = c(min(long_data$value), 0.02)
limits = c(min(long_data$value), 0.02)
long_data %>%
ggplot(aes(i,j, fill = value)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral",
limits = c(min(long_data$value), 0.02))
kelly <- function(params){
# C is a free var.
# B is a free var.
t <- params[1]
f <- params[2]
((C/B)^(1/t)-1)/f
}
C <- 10000
B <- 1000
library(numDeriv)
results<-matrix(rep(0,101000), nrow = 1000)
#compute for
for(i in 1:1000){
for(j in seq(0,101)){
val<-kelly(c(j,i))
results[i,j] <- val
print(paste0(i,"-",j))
}
}
## VIZ
results_df <- as.data.frame(results)
results_df$i <- (1:1000)
long_data <- results_df %>%
pivot_longer(cols = c(-i))
long_data$j <- rep(1:101, 1000)
long_data %>%
ggplot(aes(1, value))+
geom_boxplot()
## VIZ
library(tidyverse)
long_data %>%
ggplot(aes(i,j, fill = value)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral",
limits = c(min(long_data$value), max(long_data$value)))
900*0.11
library(dbscan)
# remove "Species", which is a categorical column
iris_2 <- iris[,1:4]
outlier_scores <- lof(iris_2, k = 5) # Consider 5 closest neighbors
plot(density(outlier_scores))
library(ggplot2)
ggplot(aes(outlier_scores)) +
geom_density(color = "dark blue", fill = 'light blue')
ggplot(aes(outlier_scores)) +
geom_density(color = "dark blue", fill = 'light blue')
# pick top 5 as outliers
outliers <-  order(outlier_scores, decreasing = TRUE)[1:5]
as.data.frame(outlier_scores)
as.data.frame(outlier_scores) %>%
ggplot(aes(outlier_scores)) +
geom_density(color = "dark blue", fill = 'light blue')
library(tidyverse)
as.data.frame(outlier_scores) %>%
ggplot(aes(outlier_scores)) +
geom_density(color = "dark blue", fill = 'light blue')
as.data.frame(outlier_scores) %>%
ggplot(aes(outlier_scores)) +
geom_density(color = "dark blue", fill = 'light blue')+
theme_minimal()
# which ones are outliers?
outliers
iris_2[outliers]
iris_2[outliers,]
prcomp(iris_2)
biplot(prcomp(iris_2))
biplot(prcomp(iris_2), geom = "point")
?biplot
biplot(prcomp(iris_2))
labels[-outliers] <- "."
# number of observations
n <- nrow(iris_2)
labels <- 1:n
labels[-outliers] <- "."
biplot(prcomp(iris_2), xlabs = labels)
biplot(prcomp(iris_2), xlabs = labels, cex = 0.8)
biplot(prcomp(iris_2, center = TRUE, scale. = TRUE), xlabs = labels, cex = 0.8)
#label only outliers.
labels[-outliers] <- "."
biplot(prcomp(iris_2, center = TRUE, scale. = TRUE), xlabs = labels, cex = 0.8)
# perform k-means with 3 groups
kmeans_result <- kmeans(iris_2, k = 3)
# perform k-means with 3 groups
kmeans_result <- kmeans(iris_2, clusters = 3)
?kmeans
# perform k-means with 3 groups
kmeans_result <- kmeans(iris_2, centers = 3)
# get cluster centers
kmeans_result$centers
# cluster IDs
kmeans_result$cluster
# calculate distances between objects and cluster centers
centers <- kmeans_result$centers
iris_2 %>%
mutate(cluster = kmeans_result$cluster)
View(iris_2)
View(centers)
iris_2 %>%
mutate(cluster = kmeans_result$cluster) %>%
mutate(distance = sqrt(
(Sepal.Length - kmeans_result$centers[cluster,1])^2 +
(Sepal.Width - kmeans_result$center[cluster,2])^2 +
(Petal.Length - kmeans_result$center[cluster,3])^2 +
(Petal.Width - kmeans_result$center[cluster,4])^2
))
iris_2 %>%
mutate(cluster = kmeans_result$cluster) %>%
mutate(distance = sqrt(
(Sepal.Length - kmeans_result$centers[cluster,1])^2 +
(Sepal.Width - kmeans_result$center[cluster,2])^2 +
(Petal.Length - kmeans_result$center[cluster,3])^2 +
(Petal.Width - kmeans_result$center[cluster,4])^2
)) %>%
arrange(distance) %>%
top_n(5)
iris_2 %>%
mutate(cluster = kmeans_result$cluster) %>%
mutate(distance = sqrt(
(Sepal.Length - kmeans_result$centers[cluster,1])^2 +
(Sepal.Width - kmeans_result$center[cluster,2])^2 +
(Petal.Length - kmeans_result$center[cluster,3])^2 +
(Petal.Width - kmeans_result$center[cluster,4])^2
)) %>%
mutate(id = rownames(.))
iris_2 %>%
mutate(cluster = kmeans_result$cluster) %>%
mutate(distance = sqrt(
(Sepal.Length - kmeans_result$centers[cluster,1])^2 +
(Sepal.Width - kmeans_result$center[cluster,2])^2 +
(Petal.Length - kmeans_result$center[cluster,3])^2 +
(Petal.Width - kmeans_result$center[cluster,4])^2
)) %>%
mutate(id = rownames(.)) %>%
arrange(distance) %>%
top_n(5)
iris_2 %>%
mutate(cluster = kmeans_result$cluster) %>%
mutate(distance = sqrt(
(Sepal.Length - kmeans_result$centers[cluster,1])^2 +
(Sepal.Width - kmeans_result$center[cluster,2])^2 +
(Petal.Length - kmeans_result$center[cluster,3])^2 +
(Petal.Width - kmeans_result$center[cluster,4])^2
)) %>%
mutate(id = rownames(.)) %>%
arrange(desc(distance)) %>%
top_n(5)
km_outliers <- iris_2 %>%
mutate(cluster = kmeans_result$cluster) %>%
mutate(distance = sqrt(
(Sepal.Length - kmeans_result$centers[cluster,1])^2 +
(Sepal.Width - kmeans_result$center[cluster,2])^2 +
(Petal.Length - kmeans_result$center[cluster,3])^2 +
(Petal.Width - kmeans_result$center[cluster,4])^2
)) %>%
mutate(id = rownames(.)) %>%
arrange(desc(distance)) %>%
top_n(5)
View(km_outliers)
library(tidyverse)
ggplot()+
geom_point(data=iris_2, aes(x = Sepal.Length, y = Sepal.Width,
color = factor(kmeans_result$cluster))) +
geom_point(aes(x = iris_2[km_outliers, "Sepal.Length"],
y = iris_2[km_outliers, "Sepal.Width"]),
color = "black") +
labs(title = "Outlier Detection with Clustering",
color = "Groups")
View(km_outliers)
ggplot()+
geom_point(data=iris_2, aes(x = Sepal.Length, y = Sepal.Width,
color = factor(kmeans_result$cluster))) +
geom_point(aes(x = iris_2[km_outliers$id, "Sepal.Length"],
y = iris_2[km_outliers$id, "Sepal.Width"]),
color = "black") +
labs(title = "Outlier Detection with Clustering",
color = "Groups")
kmeans_result$center[cluster,4]
kmeans_result$center[3,4]
# perform k-means with 3 groups
set.seed(1996)
kmeans_result <- kmeans(iris_2, centers = 3)
# get cluster centers
kmeans_result$centers
# cluster IDs
kmeans_result$cluster
# *~.*~. T I D Y V E R S E   S T Y L E .~*.~*
km_outliers <- iris_2 %>%
mutate(cluster = kmeans_result$cluster) %>%
mutate(distance = sqrt(
(Sepal.Length - kmeans_result$centers[cluster,1])^2 +
(Sepal.Width - kmeans_result$center[cluster,2])^2 +
(Petal.Length - kmeans_result$center[cluster,3])^2 +
(Petal.Width - kmeans_result$center[cluster,4])^2
)) %>%
mutate(id = rownames(.)) %>%
arrange(desc(distance)) %>%
top_n(5)
library(tidyverse)
ggplot()+
geom_point(data=iris_2, aes(x = Sepal.Length, y = Sepal.Width,
color = factor(kmeans_result$cluster))) +
geom_point(aes(x = iris_2[km_outliers$id, "Sepal.Length"],
y = iris_2[km_outliers$id, "Sepal.Width"]),
color = "black") +
labs(title = "Outlier Detection with Clustering",
color = "Groups")
km_outliers <- iris_2 %>%
mutate(id = rownames(.)) %>%
mutate(cluster = kmeans_result$cluster) %>%
mutate(distance = sqrt(
(Sepal.Length - kmeans_result$centers[cluster,1])^2 +
(Sepal.Width - kmeans_result$center[cluster,2])^2 +
(Petal.Length - kmeans_result$center[cluster,3])^2 +
(Petal.Width - kmeans_result$center[cluster,4])^2
)) %>%
arrange(desc(distance)) %>%
top_n(5)
ggplot()+
geom_point(data=iris_2, aes(x = Sepal.Length, y = Sepal.Width,
color = factor(kmeans_result$cluster))) +
geom_point(aes(x = iris_2[km_outliers$id, "Sepal.Length"],
y = iris_2[km_outliers$id, "Sepal.Width"]),
color = "black") +
labs(title = "Outlier Detection with Clustering",
color = "Groups")
install.packages("gutenbergr")
setwd("~/Documents/SmallDataScienceProjects/oyster_data")
